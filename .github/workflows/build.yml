name: Build Cross-Platform Binaries

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            artifact: kide-linux-x64
          # macOS builds (ARM64 on GitHub Actions)  
          - os: macos-latest
            artifact: kide-macos-arm64
          # Windows builds
          - os: windows-latest
            artifact: kide-windows-x64

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

    - name: Install Node.js dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build

    - name: Build Tauri app
      run: npm run tauri build

    - name: Upload binaries (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: |
          src-tauri/target/release/bundle/appimage/
          src-tauri/target/release/bundle/deb/

    - name: Upload binaries (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: |
          src-tauri/target/release/bundle/dmg/
          src-tauri/target/release/bundle/macos/

    - name: Upload binaries (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: |
          src-tauri/target/release/bundle/msi/
          src-tauri/target/release/*.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Rename and organize artifacts
      run: |
        # Linux files
        if [ -d "kide-linux-x64" ]; then
          mkdir -p release-files
          find kide-linux-x64 -name "*.AppImage" -exec cp {} release-files/kide-linux-x64.AppImage \;
          find kide-linux-x64 -name "*.deb" -exec cp {} release-files/kide-linux-x64.deb \;
        fi
        
        # macOS files  
        if [ -d "kide-macos-arm64" ]; then
          find kide-macos-arm64 -name "*.dmg" -exec cp {} release-files/kide-macos-arm64.dmg \;
          find kide-macos-arm64 -name "*.app" -type d -exec zip -r release-files/kide-macos-arm64.app.zip {} \;
        fi
        
        # Windows files
        if [ -d "kide-windows-x64" ]; then
          find kide-windows-x64 -name "*.msi" -exec cp {} release-files/kide-windows-x64.msi \;
          find kide-windows-x64 -name "*.exe" -not -path "*/bundle/*" -exec cp {} release-files/kide-windows-x64.exe \;
        fi
        
        ls -la release-files/ || echo "No release files found"
      
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        draft: false
        prerelease: false
        generate_release_notes: true
        files: release-files/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}