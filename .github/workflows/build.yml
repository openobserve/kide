name: Build Cross-Platform Binaries

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: kide-linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact: kide-linux-arm64
          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: kide-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: kide-macos-arm64
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: kide-windows-x64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact: kide-windows-arm64

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies (Ubuntu x64)
      if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

    - name: Install dependencies (Ubuntu ARM64)
      if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        sudo dpkg --add-architecture arm64
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev:arm64 libwebkit2gtk-4.1-dev:arm64 libappindicator3-dev:arm64 librsvg2-dev:arm64 patchelf

    - name: Install Node.js dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build

    - name: Build Tauri app
      run: npm run tauri build -- --target ${{ matrix.target }}

    - name: Upload binaries (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: |
          src-tauri/target/release/bundle/appimage/*.AppImage
          src-tauri/target/release/bundle/deb/*.deb

    - name: Upload binaries (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: |
          src-tauri/target/release/bundle/dmg/*.dmg
          src-tauri/target/release/bundle/macos/*.app

    - name: Upload binaries (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: |
          src-tauri/target/release/bundle/msi/*.msi
          src-tauri/target/release/*.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          kide-linux-x64/*
          kide-linux-arm64/*
          kide-macos-x64/*
          kide-macos-arm64/*
          kide-windows-x64/*
          kide-windows-arm64/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}